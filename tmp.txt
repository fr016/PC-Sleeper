<#
.SYNOPSIS
    Analyzes the token size of Active Directory users and generates an interactive HTML report.
.DESCRIPTION
    This script scans active users in Active Directory and estimates their token size.
    It generates an interactive HTML report displaying:
    - The domain name
    - The number of groups the user belongs to
    - An alert if the token exceeds the threshold
    - A message if no issues are detected
    - **Mock mode (`-Mock`)** with problematic accounts
    - **If `_fr` is in the username, the report opens automatically**
    - **In mock mode, the report also opens automatically**

.PARAMETER AccountName
    (Optional) Name of a specific user to analyze.

.PARAMETER TrustedDomain
    (Optional) Name of the trusted domain to query.

.PARAMETER Mock
    (Optional) Enables test mode with problematic data.

.EXAMPLE
    Get-TokenSizeReport.ps1
    Scans all active users in the current domain and generates an HTML report.

.EXAMPLE
    Get-TokenSizeReport.ps1 -TrustedDomain "corp.acme.com"
    Scans all users in the remote domain "corp.acme.com" and generates an HTML report.

.EXAMPLE
    Get-TokenSizeReport.ps1 -Mock
    Generates a report with mock data including problematic accounts.
#>

param(
    [string]$AccountName,
    [string]$TrustedDomain,
    [switch]$Mock
)

# Critical token size threshold
$Threshold = 8192
$CurrentUser = $env:USERNAME

# Logging configuration
function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)][string]$Message,
        [ValidateSet("INFO", "WARN", "ERROR")][string]$LogLevel = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$LogLevel] $Message"
}

<#
.SYNOPSIS
    Verifies the environment before execution.
#>
function Check-Environment {
    if ($Mock) { return }  # No need to check AD in mock mode

    Write-Log -Message "Checking execution environment..." -LogLevel "INFO"
    if (-not (Get-Command "Get-ADUser" -ErrorAction SilentlyContinue)) {
        Write-Log -Message "Active Directory module is required!" -LogLevel "ERROR"
        throw "Active Directory module required"
    }
}

<#
.SYNOPSIS
    Retrieves active Active Directory users.
#>
function Get-ADUsers {
    if ($Mock) {
        Write-Log -Message "Mock mode: Generating sample problematic data..." -LogLevel "INFO"
        return @(
            [PSCustomObject]@{ SamAccountName="jdoe"; Domain="corp.local"; MemberOf=250; SIDHistory=10 }
            [PSCustomObject]@{ SamAccountName="alice"; Domain="corp.local"; MemberOf=300; SIDHistory=20 }
            [PSCustomObject]@{ SamAccountName="bob"; Domain="corp.acme.com"; MemberOf=50; SIDHistory=5 }
            [PSCustomObject]@{ SamAccountName="charlie"; Domain="corp.acme.com"; MemberOf=20; SIDHistory=2 }
        )
    }

    Write-Log -Message "Retrieving Active Directory users..." -LogLevel "INFO"
    $Server = if ($TrustedDomain) { $TrustedDomain } else { $env:USERDNSDOMAIN }
    $filter = { Enabled -eq $true }
    if ($AccountName) { $filter = { SamAccountName -eq $AccountName } }

    try {
        $users = Get-ADUser -Filter $filter -Server $Server -Properties MemberOf, SIDHistory, DistinguishedName
    }
    catch {
        Write-Log -Message "Error retrieving AD users: $_" -LogLevel "ERROR"
        return @()
    }

    return $users | ForEach-Object {
        $dn = $_.DistinguishedName -split ",DC="
        $domain = ($dn[1..$dn.Length] -join ".")
        [PSCustomObject]@{ SamAccountName=$_.SamAccountName; Domain=$domain; MemberOf=$_.MemberOf.Count; SIDHistory=$_.SIDHistory.Count }
    }
}

<#
.SYNOPSIS
    Calculates the estimated token size of a user.
#>
function Calculate-TokenSize {
    param([PSCustomObject]$User)
    $TokenSize = 1200 + (40 * ($User.MemberOf + $User.SIDHistory))
    return @{ TokenSize=$TokenSize; MemberOfCount=($User.MemberOf + $User.SIDHistory) }
}

<#
.SYNOPSIS
    Generates an interactive HTML report.
#>
function Generate-HTMLReport {
    param([array]$Users)

    Write-Log -Message "Generating HTML report..." -LogLevel "INFO"
    $date = Get-Date -Format "yyyyMMdd_HHmmss"
    $fileHTML = "TokenSizeReport_$date.html"

    $htmlHeader = @"
    <html>
    <head>
        <title>Token Size AD Report</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { padding: 10px; border: 1px solid black; text-align: left; }
            th { background-color: #f2f2f2; }
            .alert { color: red; font-weight: bold; }
        </style>
    </head>
    <body>
        <h2>Token Size AD Report</h2>
        <p>Threshold used: <b>$Threshold bytes</b></p>
"@

    $htmlFooter = "</body></html>"

    $reportTop = $Users | Where-Object { $_.TokenSize -ge $Threshold } | Sort-Object TokenSize -Descending

    if ($reportTop.Count -eq 0) {
        $htmlBody = "<p>No issues detected. All users have a token size below $Threshold bytes.</p>"
    } else {
        $htmlBody = "<table><tr><th>Username</th><th>Domain</th><th>Token Size</th><th>Group Count</th></tr>"
        foreach ($user in $reportTop) {
            $htmlBody += "<tr><td>$($user.SamAccountName)</td><td>$($user.Domain)</td><td class='alert'>$($user.TokenSize)</td><td>$($user.MemberOfCount)</td></tr>"
        }
        $htmlBody += "</table>"
    }

    $htmlContent = $htmlHeader + $htmlBody + $htmlFooter
    $htmlContent | Out-File -Encoding UTF8 -FilePath $fileHTML
    Write-Log -Message "Report generated: $fileHTML" -LogLevel "INFO"

    # Open the report if the user contains "_fr" or if mock mode is enabled
    if ($Mock -or $CurrentUser -match "_fr") {
        Write-Log -Message "Automatically opening the HTML report..." -LogLevel "INFO"
        Start-Process $fileHTML
    }
}

# Main execution
try {
    Check-Environment
    $users = Get-ADUsers
    $usersWithToken = @()

    foreach ($user in $users) {
        $tokenData = Calculate-TokenSize -User $user
        $usersWithToken += [PSCustomObject]@{ SamAccountName=$user.SamAccountName; Domain=$user.Domain; TokenSize=$tokenData.TokenSize; MemberOfCount=$tokenData.MemberOfCount }
    }

    Generate-HTMLReport -Users $usersWithToken
    Write-Log -Message "Script completed successfully." -LogLevel "INFO"
}
catch {
    Write-Log -Message "Error: $_" -LogLevel "ERROR"
}
