
<#
.SYNOPSIS
Vérifie et relance les tâches planifiées dans un dossier spécifié sur un ordinateur distant ou local.

.DESCRIPTION
Ce script vérifie les tâches planifiées dans un dossier donné sur un ordinateur distant ou local et tente de les relancer si leur dernière exécution n'a pas été réussie. Il effectue jusqu'à trois tentatives de relance.

.PARAMETER CheminDossierTaches
Le chemin du dossier contenant les tâches planifiées à surveiller.

.PARAMETER NomOrdinateur
Le nom de l'ordinateur sur lequel vérifier et relancer les tâches planifiées. Si non spécifié, les tâches seront vérifiées et relancées localement.

.EXAMPLE
.\RelancerTaches.ps1 -CheminDossierTaches "C:\chemin\vers\DirMon" -NomOrdinateur "NomOrdinateur"
Ce commande vérifie et relance les tâches planifiées dans le dossier "C:\chemin\vers\DirMon" sur l'ordinateur distant "NomOrdinateur".

.NOTES
Auteur : OpenAI
Date : 2024-03-18
Version : 1.0
#>

function Test-Ping {
    param(
        [string]$computerName
    )

    $ping = New-Object System.Net.NetworkInformation.Ping
    $result = $ping.Send($computerName)

    if ($result.Status -eq "Success") {
        return $true
    } else {
        return $false
    }
}

function Test-InvokeCommand {
    param(
        [string]$computerName
    )

    try {
        Invoke-Command -ComputerName $computerName -ScriptBlock { }
        return $true
    } catch {
        return $false
    }
}

function VerifierEtRelancerTache {
    param(
        [string]$cheminDossierTaches,
        [string]$nomTache,
        [string]$nomOrdinateur
    )

    $nombreTentatives = 3
    $tentative = 1
    $success = $false

    while ($tentative -le $nombreTentatives -and -not $success) {
        if ($nomOrdinateur -eq "localhost" -or [string]::IsNullOrEmpty($nomOrdinateur)) {
            $lastRunTime = Get-ScheduledTask -TaskPath $cheminDossierTaches -TaskName $nomTache | Get-ScheduledTaskInfo | Select-Object -ExpandProperty LastRunTime
        }
        else {
            if (Test-Ping -computerName $nomOrdinateur -eq $true) {
                if (Test-InvokeCommand -computerName $nomOrdinateur -eq $true) {
                    $lastRunTime = Invoke-Command -ComputerName $nomOrdinateur -ScriptBlock {
                        param($cheminDossierTaches, $nomTache)
                        Get-ScheduledTask -TaskPath $cheminDossierTaches -TaskName $nomTache | Get-ScheduledTaskInfo | Select-Object -ExpandProperty LastRunTime
                    } -ArgumentList $cheminDossierTaches, $nomTache
                } else {
                    Write-Host "La commande Invoke-Command n'est pas disponible sur $nomOrdinateur."
                    break
                }
            } else {
                Write-Host "L'ordinateur $nomOrdinateur n'est pas joignable."
                break
            }
        }

        if ($lastRunTime -eq $null) {
            if ($nomOrdinateur -eq "localhost" -or [string]::IsNullOrEmpty($nomOrdinateur)) {
                Start-ScheduledTask -TaskPath $cheminDossierTaches -TaskName $nomTache
            }
            else {
                Invoke-Command -ComputerName $nomOrdinateur -ScriptBlock {
                    param($cheminDossierTaches, $nomTache)
                    Start-ScheduledTask -TaskPath $cheminDossierTaches -TaskName $nomTache
                } -ArgumentList $cheminDossierTaches, $nomTache

                Start-Sleep -Seconds 10

                $lastRunTime = Invoke-Command -ComputerName $nomOrdinateur -ScriptBlock {
                    param($cheminDossierTaches, $nomTache)
                    Get-ScheduledTask -TaskPath $cheminDossierTaches -TaskName $nomTache | Get-ScheduledTaskInfo | Select-Object -ExpandProperty LastRunTime
                } -ArgumentList $cheminDossierTaches, $nomTache
            }

            if ($lastRunTime -ne $null) {
                $success = $true
            }
        }
        else {
            $success = $true
        }

        $tentative++
    }

    return $success
}

function Main {
    param(
        [string]$cheminDossierTaches,
        [string]$nomOrdinateur
    )

    if ($nomOrdinateur -eq "localhost" -or [string]::IsNullOrEmpty($nomOrdinateur)) {
        $nomOrdinateur = $env:COMPUTERNAME
    }

    $nomsTaches = @()

    if ($nomOrdinateur -eq "localhost" -or [string]::IsNullOrEmpty($nomOrdinateur)) {
        $nomsTaches = Get-ScheduledTask -TaskPath $cheminDossierTaches | Select-Object -ExpandProperty TaskName
    }
    else {
        if (Test-Ping -computerName $nomOrdinateur -eq $true) {
            if (Test-InvokeCommand -computerName $nomOrdinateur -eq $true) {
                $nomsTaches = Invoke-Command -ComputerName $nomOrdinateur -ScriptBlock {
                    param($cheminDossierTaches)
                    Get-ScheduledTask -TaskPath $cheminDossierTaches | Select-Object -ExpandProperty TaskName
                } -ArgumentList $cheminDossierTaches
            } else {
                Write-Host "La commande Invoke-Command n'est pas disponible sur $nomOrdinateur."
            }
        } else {
            Write-Host "L'ordinateur $nomOrdinateur n'est pas joignable."
        }
    }

    foreach ($nomTache in $nomsTaches) {
        $resultatRelance = VerifierEtRelancerTache -cheminDossierTaches $cheminDossierTaches -nomTache $nomTache -nomOrdinateur $nomOrdinateur

        if ($resultatRelance) {
            Write-Host "La tâche $nomTache
        if ($resultatRelance) {
            Write-Host "La tâche $nomTache a été relancée avec succès sur $nomOrdinateur."
        }
        else {
            Write-Host "Impossible de relancer la tâche $nomTache après 3 tentatives sur $nomOrdinateur."
        }
    }
}

Main -cheminDossierTaches "C:\chemin\vers\DirMon" -nomOrdinateur "localhost"
