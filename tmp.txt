
<#
  This script will enumerate all enabled user accounts in a Domain, calculate their estimated Token
  Size and create two reports in CSV format:
  1) A report of all users with an estimated token size greater than or equal to the number defined
     by the $TokensSizeThreshold variable.
  2) A report of the top x users as defined by the $TopUsers variable.

  Syntax:

  - To run the script against all enabled user accounts in the current domain:
      Get-TokenSizeReport.ps1

  - To run the script against all enabled user accounts of a trusted domain:
      Get-TokenSizeReport.ps1 -TrustedDomain:mytrusteddomain.com

  - To run the script against 1 user account:
      Get-TokenSizeReport.ps1 -AccountName:<samaccountname>

  - To run the script against 1 user account of a trusted domain:
      Get-TokenSizeReport.ps1 -AccountName:<samaccountname> -TrustedDomain:mytrusteddomain.com

  Script Name: Get-TokenSizeReport.ps1
  Release 2.8
  Written by Jeremy Saunders (jeremy@jhouseconsulting.com) 13/12/2013
  Modified by Jeremy Saunders (jeremy@jhouseconsulting.com) 22/09/2017<#
.SYNOPSIS
    GÃ©nÃ¨re un rapport sur la taille estimÃ©e des jetons Kerberos des utilisateurs d'un domaine Active Directory.

.DESCRIPTION
    Ce script Ã©numÃ¨re tous les comptes d'utilisateurs actifs dans un domaine, calcule la taille estimÃ©e de leur jeton Kerberos et crÃ©e deux rapports au format CSVÂ :
    1. Un rapport de tous les utilisateurs avec une taille de jeton estimÃ©e supÃ©rieure ou Ã©gale Ã  une valeur dÃ©finie par la variable $TokensSizeThreshold.
    2. Un rapport des x utilisateurs ayant les plus grandes tailles de jeton, dÃ©fini par la variable $TopUsers.

.PARAMETER AccountName
    (Optionnel) Le nom du compte SAM d'un utilisateur spÃ©cifique Ã  analyser.

.PARAMETER TrustedDomain
    (Optionnel) Le domaine de confiance Ã  analyser.

.PARAMETER OutputDirectory
    (Optionnel) Le rÃ©pertoire oÃ¹ les rapports CSV seront enregistrÃ©s. Par dÃ©faut, le rÃ©pertoire courant.

.EXAMPLE
    .\Get-TokenSizeReport.ps1
    ExÃ©cute le script pour tous les comptes d'utilisateurs actifs dans le domaine actuel.

.EXAMPLE
    .\Get-TokenSizeReport.ps1 -AccountName "jdoe"
    ExÃ©cute le script pour l'utilisateur spÃ©cifiÃ©.

.EXAMPLE
    .\Get-TokenSizeReport.ps1 -TrustedDomain "trusted.domain.com"
    ExÃ©cute le script pour tous les comptes d'utilisateurs actifs dans le domaine de confiance spÃ©cifiÃ©.

.NOTES
    AuteurÂ : [Votre Nom]
    DateÂ : [Date]
    VersionÂ : 1.0
#>

param (
    [Parameter(Mandatory = $false)]
    [string]$AccountName,

    [Parameter(Mandatory = $false)]
    [string]$TrustedDomain,

    [Parameter(Mandatory = $false)]
    [string]$OutputDirectory = (Get-Location).Path
)

# Variables configurables
$TokensSizeThreshold = 6000
$TopUsers = 200
$ProgressBar = $true
$ConsoleOutput = $true
$OutputSummary = $true
$UseTokenGroups = $true
$UseGetAuthorizationGroups = $false

# Fonction pour obtenir le contexte de domaine
function Get-DomainContext {
    param (
        [string]$TrustedDomain
    )
    if ($TrustedDomain) {
        try {
            $context = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext("Domain", $TrustedDomain)
            $domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($context)
            return $domain
        } catch {
            Write-Error "Impossible de se connecter au domaine de confiance spÃ©cifiÃ©."
            exit
        }
    } else {
        return [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
    }
}

# Fonction pour rÃ©cupÃ©rer les utilisateurs du domaine
function Get-DomainUsers {
    param (
        [System.DirectoryServices.ActiveDirectory.Domain]$Domain,
        [string]$AccountName
    )
    $searcher = New-Object System.DirectoryServices.DirectorySearcher
    $searcher.SearchRoot = $Domain.GetDirectoryEntry()
    $searcher.Filter = if ($AccountName) {
        "(&(objectCategory=person)(objectClass=user)(sAMAccountName=$AccountName))"
    } else {
        "(&(objectCategory=person)(objectClass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
    }
    $searcher.PageSize = 1000
    $searcher.PropertiesToLoad.AddRange(@("sAMAccountName", "memberOf", "tokenGroups", "sIDHistory"))
    return $searcher.FindAll()
}

# Fonction pour calculer la taille estimÃ©e du jeton
function Calculate-TokenSize {
    param (
        [System.DirectoryServices.DirectoryEntry]$User
    )
    $d = 0
    $s = 0

    if ($UseTokenGroups) {
        $tokenGroups = $User.Invoke("tokenGroups")
        foreach ($group in $tokenGroups) {
            $sid = New-Object System.Security.Principal.SecurityIdentifier($group, 0)
            switch ($sid.AccountDomainSid.Value) {
                ($User.Properties["objectSid"][0].AccountDomainSid.Value) { $s++ }
                default { $d++ }
            }
        }
    }

    if ($UseGetAuthorizationGroups) {
        try {
            $groups = $User.Groups
            foreach ($group in $groups) {
                switch ($group.GroupScope) {
                    "Universal" {
                        if ($group.Parent.Name -eq $User.Parent.Name) { $s++ } else { $d++ }
                    }
                    "Global" { $s++ }
                    "DomainLocal" { $d++ }
                }
            }
        } catch {
            Write-Warning "Erreur lors de la rÃ©cupÃ©ration des groupes pour l'utilisateur $($User.Properties["sAMAccountName"][0])."
        }
    }

    $sidHistoryCount = $User.Properties["sIDHistory"].Count
    $d += $sidHistoryCount

    $tokenSize = 1200 + (40 * $d) + (8 * $s)
    return $tokenSize
}

# Fonction pour exporter les rapports CSV
function Export-Reports {
    param (
        [System.Collections.ArrayList]$UserTokenSizes,
        [string]$OutputDirectory
    )
    $thresholdReport = $UserTokenSizes | Where-Object { $_.TokenSize -ge $TokensSizeThreshold }
    $topUsersReport = $UserTokenSizes | Sort-Object TokenSize -Descending | Select-Object -First $TopUsers

    $thresholdReport | Export-Csv -Path (Join-Path $OutputDirectory "TokenSize_Threshold_Report.csv") -NoTypeInformation
    $topUsersReport | Export-Csv -Path (Join-Path $OutputDirectory "TokenSize_TopUsers_Report.csv") -NoTypeInformation
}

# Fonction principale
function Main {
    $domain = Get-DomainContext -TrustedDomain $TrustedDomain
    $users = Get-DomainUsers -Domain $domain -AccountName $AccountName

    $userTokenSizes = [System.Collections.ArrayList]::new()
    $totalUsers = $users.Count
    $processedUsers = 0

    foreach ($user in $users) {
        $tokenSize = Calculate-TokenSize -User $user.GetDirectoryEntry()
        $userTokenSizes.Add([PSCustomObject]@{
            sAMAccountName = $user.Properties["sAMAccountName"][0]
            TokenSize = $tokenSize
        })

        $processedUsers++
        if ($ProgressBar) {
            Write-Progress -Activity "Calcul de la taille des jetons" -Status "$processedUsers sur $totalUsers utilisateurs traitÃ©s" -PercentComplete (($processedUsers / $totalUsers) * 100)
        }
    }

    Export-Reports -UserTokenSizes $userTokenSizes -OutputDirectory $OutputDirectory

    if ($Output
::contentReference[oaicite:0]{index=0}
 
