
###############################################################################
# MyAllInOneScript.ps1
###############################################################################
Set-StrictMode -Version Latest

###############################################################################
# Fonction de log
###############################################################################
function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [string]$Message,
        
        [Parameter(Mandatory)]
        [ValidateSet("Info","Warning","Error")]
        [string]$Level
    )
    $ts = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    Write-Host "[$ts][$Level] $Message"
}

###############################################################################
# Déploiement des scripts dans le dossier TEMP d'un serveur distant
###############################################################################
function Deploy-Scripts {
    param(
        [Parameter(Mandatory)]
        [string]$LocalScriptsPath,

        [Parameter(Mandatory)]
        [string]$RemoteComputerName
    )

    Write-Log -Message "Entering Deploy-Scripts" -Level Info

    # Récupération du dossier TEMP sur le serveur distant
    $remoteTemp = Invoke-Command -ComputerName $RemoteComputerName -ScriptBlock {
        $env:TEMP
    }
    $RemoteScriptsPath = Join-Path $remoteTemp "MyScripts"

    # Création du dossier MyScripts si nécessaire
    Invoke-Command -ComputerName $RemoteComputerName -ScriptBlock {
        param($path)
        if (!(Test-Path $path)) {
            New-Item -Path $path -ItemType Directory | Out-Null
        }
    } -ArgumentList $RemoteScriptsPath

    # Montage d'un PSDrive pointant sur ce répertoire
    $driveName = "RemoteShare"
    $trimmed   = $RemoteScriptsPath.TrimStart('\')
    New-PSDrive -Name $driveName -PSProvider FileSystem -Root "\\$RemoteComputerName\$trimmed" -ErrorAction Stop | Out-Null

    # Copie des scripts locaux vers le serveur
    Copy-Item -Path "$LocalScriptsPath\*" -Destination "$driveName:\" -Recurse -Force

    Remove-PSDrive -Name $driveName -Force -ErrorAction SilentlyContinue
    Write-Log -Message "Scripts deployed to $RemoteComputerName:$RemoteScriptsPath" -Level Info

    return $RemoteScriptsPath
}

###############################################################################
# Nettoyage du dossier MyScripts dans le TEMP d'un serveur distant
###############################################################################
function Clean-RemoteTemp {
    param(
        [Parameter(Mandatory)]
        [string]$RemoteComputerName
    )

    Write-Log -Message "Entering Clean-RemoteTemp" -Level Info

    $remoteTemp = Invoke-Command -ComputerName $RemoteComputerName -ScriptBlock {
        Join-Path $env:TEMP "MyScripts"
    }

    Invoke-Command -ComputerName $RemoteComputerName -ScriptBlock {
        param($path)
        if (Test-Path $path) {
            Remove-Item -Path $path -Recurse -Force
        }
    } -ArgumentList $remoteTemp

    Write-Log -Message "Cleaned $remoteTemp on $RemoteComputerName" -Level Info
}

###############################################################################
# Workflow pour exécuter des scripts en parallèle sur le serveur distant
###############################################################################
workflow MyParallelWorkflow {
    param(
        [Parameter(Mandatory=$true)]
        [string]$RemoteComputerName,

        [Parameter(Mandatory=$true)]
        [string[]]$ScriptsNames,

        [Parameter(Mandatory=$true)]
        [string]$LocalScriptsPath
    )

    # 1) Déployer les scripts dans un bloc InlineScript
    $remoteScriptsPath = InlineScript {
        # On source ce script lui-même pour récupérer Deploy-Scripts
        . $using:PSScriptRoot\MyAllInOneScript.ps1
        
        Write-Host "Deploying scripts..."
        $res = Deploy-Scripts -LocalScriptsPath $using:LocalScriptsPath -RemoteComputerName $using:RemoteComputerName
        return $res
    }

    # 2) Exécution parallèle de chaque script
    foreach -parallel ($script in $ScriptsNames) {
        InlineScript {
            . $using:PSScriptRoot\MyAllInOneScript.ps1
            Write-Host "Invoking $using:script on $using:RemoteComputerName"

            Invoke-Command -ComputerName $using:RemoteComputerName -ScriptBlock {
                & (Join-Path $using:remoteScriptsPath $using:script)
            }
        }
    }

    # 3) Nettoyage
    InlineScript {
        . $using:PSScriptRoot\MyAllInOneScript.ps1
        Clean-RemoteTemp -RemoteComputerName $using:RemoteComputerName
    }

    Write-Host "All scripts were invoked in parallel, cleanup done."
}

###############################################################################
# Exemple d'utilisation automatique (appelé à la fin si tu le souhaites).
# Tu peux commenter cette section si tu veux juste importer le script.
###############################################################################
# Change les valeurs ci-dessous selon ton environnement
$remoteServer  = "TestServer"    # <-- Nom du serveur distant
$localPath     = "C:\LocalScripts" # <-- Répertoire local avec tes scripts
$scriptsToRun  = @("ScriptA.ps1","ScriptB.ps1")

Write-Host "`n=== DEMO : Appel du workflow en parallèle ===`n"
MyParallelWorkflow -RemoteComputerName $remoteServer `
                   -ScriptsNames $scriptsToRun `
                   -LocalScriptsPath $localPath

Write-Host "`n=== Fin de démo, tu peux fermer la console ou modifier les variables. ==="
