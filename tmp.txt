<#
.SYNOPSIS
    Measures Active Directory replication latency between domain controllers.

.DESCRIPTION
    This script creates a temporary user account on the PDC Emulator of a specified domain 
    and checks how long it takes for the account to replicate to all domain controllers.
    It generates an HTML report showing the latency per DC and highlights values exceeding 
    a defined threshold.

.PARAMETER DomainFQDN
    The FQDN of the domain to target. Default is 'caza'.

.PARAMETER ReplicationLatencyThreshold
    Optional. Latency threshold (in seconds) to highlight delays in red. Default: 500.

.PARAMETER SimulationMode
    Optional. If specified, the script simulates data without any real interaction with AD.

.EXAMPLE
    Test-ADReplicationLatency

.EXAMPLE
    Test-ADReplicationLatency -DomainFQDN corp.local

.EXAMPLE
    Test-ADReplicationLatency -ReplicationLatencyThreshold 100 -SimulationMode

.NOTES
    Author: Indentation Man
    Version: 1.2

.LINK
    https://docs.microsoft.com/en-us/powershell/module/addsadministration/
#>

function Test-ADReplicationLatency
{
    [CmdletBinding()]
    param (
        [string]$DomainFQDN = "caza",
        [int]$ReplicationLatencyThreshold = 500,
        [switch]$SimulationMode
    )

    function Get-DomainControllers
    {
        if ($SimulationMode)
        {
            return @("DC1", "DC2", "DC3")
        }

        return Get-ADDomainController -Server $DomainFQDN -Filter * | Select-Object -ExpandProperty HostName
    }

    function Create-TemporaryUser
    {
        param ([string]$PDC)

        $username = "ADConvergence"

        if ($SimulationMode)
        {
            return [pscustomobject]@{ SamAccountName = $username }
        }

        if (Get-ADUser -Server $DomainFQDN -Filter "SamAccountName -eq '$username'" -Server $PDC -ErrorAction SilentlyContinue)
        {
            Remove-ADUser -Identity $username -Server $PDC -Confirm:$false
        }

        $rand = -join ((65..90) + (97..122) + (48..57) + 33,35,36,64 | Get-Random -Count 12 | ForEach-Object { [char]$_ })
        $password = ConvertTo-SecureString $rand -AsPlainText -Force
        $ou = "CN=Users,$((Get-ADDomain -Server $DomainFQDN).DistinguishedName)"

        return New-ADUser -Name $username -SamAccountName $username -AccountPassword $password -Enabled $true -Path $ou -Server $PDC -PassThru
    }

    function Wait-Until-Replicated
    {
        param ([string]$Username, [array]$DomainControllers, [int]$TimeoutSeconds = 60)

        if ($SimulationMode)
        {
            Start-Sleep -Seconds 2
            return
        }

        $start = Get-Date

        do
        {
            $found = $true
            foreach ($dc in $DomainControllers)
            {
                try
                {
                    $null = Get-ADUser -Identity $Username -Server $dc -ErrorAction Stop
                }
                catch
                {
                    $found = $false
                    break
                }
            }

            if ($found) { break }
            Start-Sleep -Seconds 2
        }
        while ((Get-Date) - $start -lt [TimeSpan]::FromSeconds($TimeoutSeconds))
    }

    function Measure-ReplicationLatency
    {
        param ([string]$Username, [datetime]$ReferenceTime, [array]$DomainControllers)

        if ($SimulationMode)
        {
            return @(
                [pscustomobject]@{ DomainController = "DC1"; ReplicationTime = 12.5 },
                [pscustomobject]@{ DomainController = "DC2"; ReplicationTime = 23.1 },
                [pscustomobject]@{ DomainController = "DC3"; ReplicationTime = 501.8 }
            )
        }

        $latencies = @()
        foreach ($dc in $DomainControllers)
        {
            try
            {
                $user = Get-ADUser -Identity $Username -Server $dc -Properties whenChanged
                $latency = $user.whenChanged - $ReferenceTime
                $latencies += [pscustomobject]@{
                    DomainController = $dc
                    ReplicationTime = [math]::Round($latency.TotalSeconds, 2)
                }
            }
            catch {}
        }

        return $latencies
    }

    function Generate-ReplicationReport
    {
        param ([array]$ReplicationLatencies, [int]$ReplicationLatencyThreshold)

        $html = @"
<html><head><title>Replication Report</title>
<style>
body { font-family: Arial; text-align: center; }
table { margin:auto; border-collapse:collapse; width:60%; box-shadow:0 0 10px rgba(0,0,0,0.1);}
th,td { border:1px solid #ccc; padding:10px; text-align:center; }
th { background:#f2f2f2; }
</style>
</head><body>
<h2>Active Directory Latency Replication Report</h2>
<table><tr><th>Domain Controller</th><th>Latency (seconds)</th></tr>
"@

        foreach ($res in $ReplicationLatencies)
        {
            if ($res.ReplicationTime -gt $ReplicationLatencyThreshold)
            {
                $html += "<tr><td>$($res.DomainController)</td><td><span style='color:red'>$($res.ReplicationTime)</span></td></tr>"
            }
            else
            {
                $html += "<tr><td>$($res.DomainController)</td><td>$($res.ReplicationTime)</td></tr>"
            }
        }

        $html += "</table></body></html>"
        $path = "$PSScriptRoot\\Replication_Report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
        $html | Out-File $path -Encoding UTF8
        Start-Process $path
    }

    function Remove-TemporaryUser
    {
        param ([string]$Username, [string]$PDC)

        if ($SimulationMode) { return }

        try
        {
            Remove-ADUser -Identity $Username -Server $PDC -Confirm:$false
        }
        catch {}
    }

    try
    {
        $PDC = if ($SimulationMode) { "PDC-SIMUL" } else { (Get-ADDomain -Server $DomainFQDN).PDCEmulator }
        $dcs = Get-DomainControllers
        $tempUser = Create-TemporaryUser -PDC $PDC
        $refTime = if ($SimulationMode) { Get-Date } else { (Get-ADUser -Identity $tempUser.SamAccountName -Server $PDC -Properties whenCreated).whenCreated }

        Wait-Until-Replicated -Username $tempUser.SamAccountName -DomainControllers $dcs
        $latencies = Measure-ReplicationLatency -Username $tempUser.SamAccountName -ReferenceTime $refTime -DomainControllers $dcs
        Generate-ReplicationReport -ReplicationLatencies $latencies -ReplicationLatencyThreshold $ReplicationLatencyThreshold
        Remove-TemporaryUser -Username $tempUser.SamAccountName -PDC $PDC

        $avg = ($latencies.ReplicationTime | Measure-Object -Average).Average
        $max = ($latencies.ReplicationTime | Measure-Object -Maximum).Maximum
        $countExceeded = ($latencies | Where-Object { $_.ReplicationTime -gt $ReplicationLatencyThreshold }).Count

        Write-Host "`nReplication Latency Summary:"
        Write-Host "  Average latency : $([math]::Round($avg, 2)) seconds"
        Write-Host "  Maximum latency : $([math]::Round($max, 2)) seconds"
        Write-Host "  DCs above threshold ($ReplicationLatencyThreshold s) : $countExceeded`n"
    }
    catch
    {
        Write-Host "An error occurred: $_"
    }
}

Test-ADReplicationLatency -SimulationMode
