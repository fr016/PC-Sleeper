<#
.SYNOPSIS
    Mesure le temps de réplication de la création d'un utilisateur sur les contrôleurs de domaine.
.DESCRIPTION
    Ce script crée un utilisateur temporaire désactivé sur le contrôleur de domaine principal (PDC),
    attend un certain temps pour permettre la réplication, puis mesure le temps de réplication en
    comparant les attributs 'whenCreated' et 'whenChanged' de l'utilisateur sur chaque contrôleur de domaine.
.PARAMETER Domain
    Le nom du domaine Active Directory à tester.
.PARAMETER WaitTime
    Le temps d'attente en secondes pour permettre la réplication avant de vérifier les contrôleurs de domaine.
    Par défaut, 30 secondes.
.EXAMPLE
    .\Mesure-ReplicationTime.ps1 -Domain "votre_domaine.local" -WaitTime 60
.NOTES
    Assurez-vous d'exécuter ce script avec des privilèges suffisants pour créer et supprimer des utilisateurs
    dans Active Directory.
#>

param (
    [Parameter(Mandatory = $true, HelpMessage = "Nom du domaine Active Directory à tester.")]
    [string]$Domain,

    [Parameter(Mandatory = $false, HelpMessage = "Temps d'attente en secondes pour permettre la réplication.")]
    [int]$WaitTime = 30
)

# Fonction pour générer un mot de passe aléatoire
function New-RandomPassword {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Longueur du mot de passe à générer.")]
        [int]$Length
    )

    Write-Verbose "Génération d'un mot de passe aléatoire de longueur $Length."

    $CharSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?'.ToCharArray()
    $Password = -join ((1..$Length) | ForEach-Object { $CharSet | Get-Random })

    Write-Verbose "Mot de passe généré : $Password"

    return $Password
}

# Fonction pour créer un utilisateur temporaire désactivé sur le PDC
function New-TemporaryUser {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Nom d'utilisateur à créer.")]
        [string]$Username,

        [Parameter(Mandatory = $true, HelpMessage = "Nom du domaine Active Directory.")]
        [string]$Domain
    )

    Write-Verbose "Création de l'utilisateur temporaire $Username sur le PDC du domaine $Domain."

    try {
        $PDC = (Get-ADDomainController -DomainName $Domain -Discover -Service PrimaryDC).Hostname
        Write-Verbose "PDC trouvé : $PDC"

        $Password = New-RandomPassword -Length 12
        $SecurePassword = ConvertTo-SecureString -String $Password -AsPlainText -Force

        New-ADUser -Name $Username `
                   -AccountPassword $SecurePassword `
                   -Enabled $false `
                   -Path "CN=Users,DC=$($Domain -replace '\.', ',DC=')" `
                   -Server $PDC

        Write-Verbose "Utilisateur $Username créé avec succès sur $PDC."
    } catch {
        Write-Error "Erreur lors de la création de l'utilisateur : $_"
    }
}

# Fonction pour récupérer la liste des contrôleurs de domaine du domaine
function Get-DomainControllers {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Nom du domaine Active Directory.")]
        [string]$Domain
    )

    Write-Verbose "Récupération de la liste des contrôleurs de domaine pour le domaine $Domain."

    try {
        $DCs = Get-ADDomainController -Filter * -Server $Domain
        Write-Verbose "Contrôleurs de domaine trouvés : $($DCs | ForEach-Object { $_.Hostname } -join ', ')"
        return $DCs
    } catch {
        Write-Error "Erreur lors de la récupération des contrôleurs de domaine : $_"
    }
}

# Fonction pour récupérer les temps de réplication de l'utilisateur sur chaque DC
function Get-UserReplicationTimes {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Nom d'utilisateur à vérifier.")]
        [string]$Username,

        [Parameter(Mandatory = $true, HelpMessage = "Liste des contrôleurs de domaine.")]
        [array]$DCs
    )

    Write-Verbose "Récupération des temps de réplication pour l'utilisateur $Username."

    $ReplicationTimes = @()

    foreach ($DC in $DCs) {
        try {
            Write-Verbose "Connexion à $($DC.Hostname) pour récupérer les attributs de l'utilisateur."

            $User = Get-ADUser -Identity $Username -Server $DC.Hostname -Properties whenCreated, whenChanged

            $ReplicationTime = [pscustomobject]@{
                DC              = $DC.Hostname
                WhenCreated     = $User.whenCreated
                WhenChanged     = $User.whenChanged
                ReplicationTime = $null
            }

            if ($User.whenCreated -ne $User.whenChanged) {
                $ReplicationTime.ReplicationTime = $User.whenChanged - $User.whenCreated
            }

            $ReplicationTimes += $ReplicationTime

            Write-Verbose "Attributs récupérés sur $($DC.Hostname) : WhenCreated = $($User.whenCreated), WhenChanged = $($User.whenChanged)"
        } catch {
            Write-Error "Erreur lors de la récupération des attributs sur $($DC.Hostname) : $_"
        }
    }

    return $ReplicationTimes
}

# Fonction pour supprimer l'utilisateur temporaire
function Remove-TemporaryUser {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, HelpMessage = "Nom d'utilisateur à supprimer.")]
        [string]$Username,

        [Parameter(Mandatory = $true, HelpMessage = "Nom du domaine Active Directory.")]
        [string]$Domain
    )

    Write-Verbose "Suppression de l'utilisateur temporaire $Username du domaine $Domain."

    try {
        Remove-ADUser -Identity $Username -Server $Domain -Confirm:$false
        Write-Verbose "Utilisateur $Username supprimé avec succès."
    } catch {
        Write-Error "Erreur lors de la suppression de l'utilisateur : $_"
    }
}

# Script principal
$Username = "TempUserForReplicationTest"

try {
    # Créer l'utilisateur temporaire sur le PDC
    New-TemporaryUser -Username $Username -Domain $Domain

    # Attendre le temps spécifié pour permettre la réplication
    Write-Verbose "Attente de $WaitTime secondes pour permettre la réplication."
    Start-Sleep -Seconds $WaitTime

    # Récupérer la liste des contrôleurs de domaine
    $DCs = Get-DomainControllers -Domain $Domain

    # Récupérer les temps de réplication
    $ReplicationResults = Get-UserReplicationTimes -Username $Username -DCs $DCs

    # Afficher les résultats
    $ReplicationResults | Format-Table -AutoSize
}
finally {
    # Supprimer l'utilisateur temporaire
    Remove-TemporaryUser -Username $Username -Domain $Domain
}

