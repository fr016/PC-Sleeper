<#
.SYNOPSIS
    Analyse la taille des tokens des utilisateurs Active Directory et génère un rapport CSV.
.DESCRIPTION
    Ce script scanne les utilisateurs activés dans le domaine Active Directory et estime leur taille de token.
    Il génère deux rapports CSV :
    1) Liste des utilisateurs dont la taille du token dépasse un seuil défini.
    2) Liste des X utilisateurs ayant les plus grands tokens.

.PARAMETER AccountName
    (Optionnel) Nom d'un utilisateur spécifique à analyser.

.PARAMETER TrustedDomain
    (Optionnel) Nom du domaine de confiance pour exécuter le script à distance.

.PARAMETER InputFile
    (Optionnel) Fichier contenant une liste de comptes utilisateurs à analyser.

.EXAMPLE
    Get-TokenSizeReport.ps1
    Analyse tous les utilisateurs activés du domaine actuel.

.EXAMPLE
    Get-TokenSizeReport.ps1 -AccountName "jdoe"
    Analyse uniquement l'utilisateur "jdoe".

#>

param(
    [string]$AccountName,
    [string]$TrustedDomain,
    [string]$InputFile
)

# Configuration des logs
<#
.SYNOPSIS
    Écrit un message dans les logs.
.DESCRIPTION
    Centralise l'écriture des logs pour assurer une traçabilité complète du script.
.PARAMETER Message
    Message à enregistrer.
.PARAMETER LogLevel
    Niveau de log (INFO, WARN, ERROR).
.EXAMPLE
    Write-Log -Message "Début du script" -LogLevel "INFO"
#>
function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)][string]$Message,
        [ValidateSet("INFO", "WARN", "ERROR")][string]$LogLevel = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$LogLevel] $Message"
}

<#
.SYNOPSIS
    Vérifie que l'environnement est prêt pour exécuter le script.
.DESCRIPTION
    Vérifie la présence du module Active Directory et des permissions suffisantes.
.EXAMPLE
    Check-Environment
#>
function Check-Environment {
    Write-Log -Message "Vérification de l'environnement d'exécution..." -LogLevel "INFO"

    if (-not (Get-Command "Get-ADUser" -ErrorAction SilentlyContinue)) {
        Write-Log -Message "Le module Active Directory est requis !" -LogLevel "ERROR"
        throw "Module AD requis"
    }

    if (-not (whoami /groups | Select-String "Domain Admins")) {
        Write-Log -Message "Attention : Ce script doit être exécuté avec des permissions administrateur !" -LogLevel "WARN"
    }
}

<#
.SYNOPSIS
    Récupère les utilisateurs Active Directory.
.DESCRIPTION
    Recherche tous les utilisateurs activés ou un utilisateur spécifique dans un domaine.
.PARAMETER AccountName
    (Optionnel) Nom du compte utilisateur à rechercher.
.PARAMETER TrustedDomain
    (Optionnel) Nom du domaine Active Directory distant.
.EXAMPLE
    Get-ADUsers
    Récupère tous les utilisateurs activés du domaine actuel.
.EXAMPLE
    Get-ADUsers -AccountName "jdoe"
    Récupère les informations de l'utilisateur "jdoe".
#>
function Get-ADUsers {
    [CmdletBinding()]
    param(
        [string]$AccountName,
        [string]$TrustedDomain
    )

    Write-Log -Message "Récupération des utilisateurs AD..." -LogLevel "INFO"
    $filter = "(&(objectClass=user)(objectcategory=person)(!userAccountControl:1.2.840.113556.1.4.803:=2))"

    if ($AccountName) {
        $filter = "(&(objectClass=user)(objectcategory=person)(samaccountname=$AccountName))"
    }

    $searchBase = if ($TrustedDomain) { "LDAP://$TrustedDomain" } else { "LDAP://" + ([ADSI] "LDAP://RootDSE").defaultNamingContext }
    $searcher = New-Object DirectoryServices.DirectorySearcher
    $searcher.SearchRoot = New-Object DirectoryServices.DirectoryEntry($searchBase)
    $searcher.Filter = $filter
    $searcher.PageSize = 1000
    $searcher.PropertiesToLoad.AddRange(@("samaccountname", "memberof", "sidhistory"))

    $users = $searcher.FindAll() | ForEach-Object {
        [PSCustomObject]@{
            SamAccountName = $_.Properties.samaccountname[0]
            MemberOf       = $_.Properties.memberof
            SIDHistory     = $_.Properties.sidhistory
        }
    }

    Write-Log -Message "Nombre d'utilisateurs récupérés : $($users.Count)" -LogLevel "INFO"
    return $users
}

<#
.SYNOPSIS
    Calcule la taille estimée du token d'un utilisateur.
.DESCRIPTION
    Utilise le nombre de groupes et d'historiques SID pour estimer la taille du token.
.PARAMETER User
    Objet utilisateur contenant les groupes et SID history.
.EXAMPLE
    $tokenSize = Calculate-TokenSize -User $user
#>
function Calculate-TokenSize {
    [CmdletBinding()]
    param(
        [PSCustomObject]$User
    )

    Write-Log -Message "Calcul de la taille du token pour $($User.SamAccountName)..." -LogLevel "INFO"

    $groups = @($User.MemberOf) + @($User.SIDHistory)
    $TokenSize = 1200 + (40 * $groups.Count)

    return $TokenSize
}

<#
.SYNOPSIS
    Génère un rapport CSV sur la taille des tokens utilisateurs.
.DESCRIPTION
    Génère un rapport listant les utilisateurs ayant un token supérieur au seuil défini.
    Un second rapport liste les X plus grands tokens.
.PARAMETER Users
    Liste des utilisateurs avec leurs tailles de tokens.
.PARAMETER Threshold
    (Optionnel) Seuil en octets pour signaler un token trop grand (Défaut : 6000).
.PARAMETER TopUsers
    (Optionnel) Nombre d'utilisateurs avec les plus grands tokens à inclure (Défaut : 200).
.EXAMPLE
    Generate-TokenReport -Users $usersWithToken
#>
function Generate-TokenReport {
    [CmdletBinding()]
    param(
        [array]$Users,
        [int]$Threshold = 6000,
        [int]$TopUsers = 200
    )

    Write-Log -Message "Génération des rapports CSV..." -LogLevel "INFO"

    $reportAll = $Users | Where-Object { $_.TokenSize -ge $Threshold }
    $reportTop = $Users | Sort-Object TokenSize -Descending | Select-Object -First $TopUsers

    $date = Get-Date -Format "yyyyMMdd_HHmmss"
    $fileAll = "TokenSizeReport_$date.csv"
    $fileTop = "TopUsersReport_$date.csv"

    $reportAll | Export-Csv -Path $fileAll -NoTypeInformation -Delimiter ";"
    $reportTop | Export-Csv -Path $fileTop -NoTypeInformation -Delimiter ";"

    Write-Log -Message "Rapport principal : $fileAll" -LogLevel "INFO"
    Write-Log -Message "Top utilisateurs : $fileTop" -LogLevel "INFO"
}

# Exécution principale du script
try {
    Check-Environment

    $users = Get-ADUsers -AccountName $AccountName -TrustedDomain $TrustedDomain
    $usersWithToken = @()

    foreach ($user in $users) {
        $tokenSize = Calculate-TokenSize -User $user
        $usersWithToken += [PSCustomObject]@{
            SamAccountName = $user.SamAccountName
            TokenSize      = $tokenSize
        }
    }

    Generate-TokenReport -Users $usersWithToken
    Write-Log -Message "Script terminé avec succès." -LogLevel "INFO"
}
catch {
    Write-Log -Message "Erreur : $_" -LogLevel "ERROR"
}
