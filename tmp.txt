function Get-Log {
    [CmdletBinding()]
    param (
        [string]$Message,
        [ValidateSet("INFO", "ERROR", "WARN")]
        [string]$Level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Output "$timestamp [$Level] $Message"
}

function Get-OutlookCalendarEvents {
    <#
    .SYNOPSIS
    Retrieves calendar events from the default Outlook Calendar.

    .DESCRIPTION
    Uses COM interop to connect to the local Outlook client and extract upcoming events 
    from the default calendar folder.

    .PARAMETER DaysAhead
    Number of days ahead to look for events (default is 7).

    .OUTPUTS
    List of events with subject, start time, end time, and location.

    .EXAMPLE
    Get-OutlookCalendarEvents -DaysAhead 3
    #>

    [CmdletBinding()]
    param (
        [int]$DaysAhead = 7
    )

    try {
        Get-Log -Message "Connecting to Outlook Application..." -Level "INFO"
        $outlook = New-Object -ComObject Outlook.Application
        $namespace = $outlook.GetNamespace("MAPI")
        $calendar = $namespace.GetDefaultFolder(9)  # olFolderCalendar

        Get-Log -Message "Filtering calendar items..." -Level "INFO"
        $now = Get-Date
        $end = $now.AddDays($DaysAhead)
        $restriction = "[Start] >= '" + $now.ToString("g") + "' AND [Start] <= '" + $end.ToString("g") + "'"
        $items = $calendar.Items
        $items.Sort("[Start]")
        $items.IncludeRecurrences = $true
        $restrictedItems = $items.Restrict($restriction)

        $results = foreach ($item in $restrictedItems) {
            [PSCustomObject]@{
                Subject = $item.Subject
                Start   = $item.Start
                End     = $item.End
                Location = $item.Location
            }
        }

        Get-Log -Message "Retrieved $($results.Count) event(s)." -Level "INFO"
        return $results
    }
    catch {
        Get-Log -Message "Error while accessing Outlook calendar: $_" -Level "ERROR"
        return $null
    }
}
