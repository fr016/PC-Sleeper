
<#
.SYNOPSIS
    Analyzes the number of groups per Active Directory user and generates an interactive HTML report.
.DESCRIPTION
    This script scans active users in Active Directory and counts the number of groups they belong to.
    It generates an interactive HTML report displaying:
    - The domain name
    - The number of groups (MemberOf + SIDHistory)
    - An alert if the number of groups exceeds the threshold
    - A message if no issues are detected
    - **Mock mode (`-Mock`)** with problematic accounts
    - **If `_fr` is in the username, the report opens automatically**
    - **In mock mode, the report also opens automatically**

.PARAMETER AccountName
    (Optional) Name of a specific user to analyze.

.PARAMETER TrustedDomain
    (Optional) Name of the trusted domain to query.

.PARAMETER Mock
    (Optional) Enables test mode with problematic data.

.PARAMETER GroupThreshold
    (Optional) Defines the number of groups considered problematic (Default: 600).

.EXAMPLE
    Get-GroupCountReport.ps1
    Scans all active users in the current domain and generates an HTML report.

.EXAMPLE
    Get-GroupCountReport.ps1 -TrustedDomain "corp.acme.com"
    Scans all users in the remote domain "corp.acme.com" and generates an HTML report.

.EXAMPLE
    Get-GroupCountReport.ps1 -Mock
    Generates a report with mock data including problematic accounts.

.EXAMPLE
    Get-GroupCountReport.ps1 -GroupThreshold 500
    Uses a custom threshold of 500 groups instead of 600.
#>

param(
    [string]$AccountName,
    [string]$TrustedDomain,
    [switch]$Mock,
    [int]$GroupThreshold = 600
)

# Get current user
$CurrentUser = $env:USERNAME

# Logging function
function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)][string]$Message,
        [ValidateSet("INFO", "WARN", "ERROR")][string]$LogLevel = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$LogLevel] $Message"
}

<#
.SYNOPSIS
    Verifies the environment before execution.
#>
function Check-Environment {
    if ($Mock) { return }  # No need to check AD in mock mode

    Write-Log -Message "Checking execution environment..." -LogLevel "INFO"
    if (-not (Get-Command "Get-ADUser" -ErrorAction SilentlyContinue)) {
        Write-Log -Message "Active Directory module is required!" -LogLevel "ERROR"
        throw "Active Directory module required"
    }
}

<#
.SYNOPSIS
    Retrieves active Active Directory users.
#>
function Get-ADUsers {
    if ($Mock) {
        Write-Log -Message "Mock mode: Generating sample problematic data..." -LogLevel "INFO"
        return @(
            [PSCustomObject]@{ SamAccountName="jdoe"; Domain="corp.local"; MemberOf=500; SIDHistory=50 }
            [PSCustomObject]@{ SamAccountName="alice"; Domain="corp.local"; MemberOf=700; SIDHistory=10 }
            [PSCustomObject]@{ SamAccountName="bob"; Domain="corp.acme.com"; MemberOf=300; SIDHistory=20 }
            [PSCustomObject]@{ SamAccountName="charlie"; Domain="corp.acme.com"; MemberOf=650; SIDHistory=5 }
        )
    }

    Write-Log -Message "Retrieving Active Directory users..." -LogLevel "INFO"
    $Server = if ($TrustedDomain) { $TrustedDomain } else { $env:USERDNSDOMAIN }
    $filter = { Enabled -eq $true }
    if ($AccountName) { $filter = { SamAccountName -eq $AccountName } }

    try {
        $users = Get-ADUser -Filter $filter -Server $Server -Properties MemberOf, SIDHistory, DistinguishedName
    }
    catch {
        Write-Log -Message "Error retrieving AD users: $_" -LogLevel "ERROR"
        return @()
    }

    return $users | ForEach-Object {
        $dn = $_.DistinguishedName -split ",DC="
        $domain = ($dn[1..$dn.Length] -join ".")
        [PSCustomObject]@{ SamAccountName=$_.SamAccountName; Domain=$domain; MemberOf=$_.MemberOf.Count; SIDHistory=$_.SIDHistory.Count }
    }
}

<#
.SYNOPSIS
    Generates an interactive HTML report.
#>
function Generate-HTMLReport {
    param([array]$Users)

    Write-Log -Message "Generating HTML report..." -LogLevel "INFO"
    $date = Get-Date -Format "yyyyMMdd_HHmmss"
    $fileHTML = "GroupCountReport_$date.html"

    $htmlHeader = @"
    <html>
    <head>
        <title>Group Count AD Report</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th, td { padding: 10px; border: 1px solid black; text-align: left; }
            th { background-color: #f2f2f2; }
            .alert { color: red; font-weight: bold; }
        </style>
    </head>
    <body>
        <h2>Group Count AD Report</h2>
        <p>Threshold used: <b>$GroupThreshold groups</b></p>
"@

    $htmlFooter = "</body></html>"

    $reportTop = $Users | Where-Object { ($_.MemberOf + $_.SIDHistory) -ge $GroupThreshold } | Sort-Object @{Expression={($_.MemberOf + $_.SIDHistory)}} -Descending

    if ($reportTop.Count -eq 0) {
        $htmlBody = "<p>No issues detected. All users belong to less than $GroupThreshold groups.</p>"
    } else {
        $htmlBody = "<table><tr><th>Username</th><th>Domain</th><th>Total Groups</th></tr>"
        foreach ($user in $reportTop) {
            $totalGroups = $user.MemberOf + $user.SIDHistory
            $htmlBody += "<tr><td>$($user.SamAccountName)</td><td>$($user.Domain)</td><td class='alert'>$totalGroups</td></tr>"
        }
        $htmlBody += "</table>"
    }

    $htmlContent = $htmlHeader + $htmlBody + $htmlFooter
    $htmlContent | Out-File -Encoding UTF8 -FilePath $fileHTML
    Write-Log -Message "Report generated: $fileHTML" -LogLevel "INFO"

    # Open the report if the user contains "_fr" or if mock mode is enabled
    if ($Mock -or $CurrentUser -match "_fr") {
        Write-Log -Message "Automatically opening the HTML report..." -LogLevel "INFO"
        Start-Process $fileHTML
    }
}

# Main execution
try {
    Check-Environment
    $users = Get-ADUsers
    Generate-HTMLReport -Users $users
    Write-Log -Message "Script completed successfully." -LogLevel "INFO"
}
catch {
    Write-Log -Message "Error: $_" -LogLevel "ERROR"
}
