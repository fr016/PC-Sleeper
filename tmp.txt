<#
.SYNOPSIS
    Analyse la taille des tokens des utilisateurs Active Directory et génère un rapport CSV.
.DESCRIPTION
    Ce script scanne les utilisateurs activés dans le domaine Active Directory et estime leur taille de token.
    Il génère **un seul fichier CSV** avec le **TOP des utilisateurs** ayant les plus grands tokens, incluant :
    - Le nom du domaine
    - Le nombre de groupes auxquels appartient l'utilisateur

.PARAMETER AccountName
    (Optionnel) Nom d'un utilisateur spécifique à analyser.

.PARAMETER TrustedDomain
    (Optionnel) Nom du domaine de confiance à interroger.

.EXAMPLE
    Get-TokenSizeReport.ps1
    🔍 Analyse tous les utilisateurs activés du domaine actuel.

.EXAMPLE
    Get-TokenSizeReport.ps1 -AccountName "jdoe"
    🔍 Analyse uniquement l'utilisateur "jdoe".

.EXAMPLE
    Get-TokenSizeReport.ps1 -TrustedDomain "corp.acme.com"
    🔍 Analyse tous les utilisateurs du domaine distant "corp.acme.com".
#>

param(
    [string]$AccountName,
    [string]$TrustedDomain
)

# Seuil critique pour le TokenSize
$Threshold = 8192

# Configuration des logs
function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)][string]$Message,
        [ValidateSet("INFO", "WARN", "ERROR")][string]$LogLevel = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] [$LogLevel] $Message"
}

<#
.SYNOPSIS
    Vérifie l'environnement avant exécution.
.DESCRIPTION
    Vérifie la présence du module Active Directory et des permissions suffisantes.
.EXAMPLE
    Check-Environment
#>
function Check-Environment {
    Write-Log -Message "Verification de l'environnement d'execution..." -LogLevel "INFO"

    if (-not (Get-Command "Get-ADUser" -ErrorAction SilentlyContinue)) {
        Write-Log -Message "Le module Active Directory est requis !" -LogLevel "ERROR"
        throw "Module AD requis"
    }

    if (-not (whoami /groups | Select-String "Domain Admins")) {
        Write-Log -Message "Attention : Ce script doit etre execute avec des permissions administrateur !" -LogLevel "WARN"
    }
}

<#
.SYNOPSIS
    Recupere les utilisateurs Active Directory.
.DESCRIPTION
    Recherche tous les utilisateurs actives ou un utilisateur specifique.
.PARAMETER AccountName
    (Optionnel) Nom du compte utilisateur a rechercher.
.PARAMETER TrustedDomain
    (Optionnel) Nom du domaine Active Directory distant.
.EXAMPLE
    Get-ADUsers
    🔍 Recupere tous les utilisateurs actives du domaine actuel.
#>
function Get-ADUsers {
    [CmdletBinding()]
    param(
        [string]$AccountName,
        [string]$TrustedDomain
    )

    Write-Log -Message "Recuperation des utilisateurs AD..." -LogLevel "INFO"
    $filter = "(&(objectClass=user)(objectcategory=person)(!userAccountControl:1.2.840.113556.1.4.803:=2))"

    if ($AccountName) {
        $filter = "(&(objectClass=user)(objectcategory=person)(samaccountname=$AccountName))"
    }

    $searchBase = if ($TrustedDomain) { "LDAP://$TrustedDomain" } else { "LDAP://" + ([ADSI] "LDAP://RootDSE").defaultNamingContext }
    $searcher = New-Object DirectoryServices.DirectorySearcher
    $searcher.SearchRoot = New-Object DirectoryServices.DirectoryEntry($searchBase)
    $searcher.Filter = $filter
    $searcher.PageSize = 1000
    $searcher.PropertiesToLoad.AddRange(@("samaccountname", "memberof", "sidhistory", "distinguishedName"))

    $users = $searcher.FindAll() | ForEach-Object {
        # Extraire le nom du domaine
        $dn = $_.Properties.distinguishedName[0]
        $domain = ($dn -split ",DC=")[1..($dn -split ",DC=").Count] -join "."

        [PSCustomObject]@{
            SamAccountName = $_.Properties.samaccountname[0]
            MemberOf       = $_.Properties.memberof
            SIDHistory     = $_.Properties.sidhistory
            Domain         = $domain
        }
    }

    Write-Log -Message "Nombre d'utilisateurs recuperes : $($users.Count)" -LogLevel "INFO"
    return $users
}

<#
.SYNOPSIS
    Calcule la taille estimee du token d'un utilisateur.
.DESCRIPTION
    Utilise le nombre de groupes et d'historiques SID pour estimer la taille du token.
.PARAMETER User
    Objet utilisateur contenant les groupes et SID history.
.EXAMPLE
    $tokenSize = Calculate-TokenSize -User $user
#>
function Calculate-TokenSize {
    [CmdletBinding()]
    param(
        [PSCustomObject]$User
    )

    Write-Log -Message "Calcul de la taille du token pour $($User.SamAccountName)..." -LogLevel "INFO"

    $groupCount = @($User.MemberOf).Count + @($User.SIDHistory).Count
    $TokenSize = 1200 + (40 * $groupCount)

    return @{
        TokenSize   = $TokenSize
        MemberOfCount = $groupCount
    }
}

<#
.SYNOPSIS
    Genere un rapport CSV sur la taille des tokens utilisateurs.
.DESCRIPTION
    Genere un rapport listant **uniquement les utilisateurs ayant les plus grands tokens**.
.PARAMETER Users
    Liste des utilisateurs avec leurs tailles de tokens.
.PARAMETER TopUsers
    (Optionnel) Nombre d'utilisateurs avec les plus grands tokens a inclure (Defaut : 200).
.EXAMPLE
    Generate-TokenReport -Users $usersWithToken
#>
function Generate-TokenReport {
    [CmdletBinding()]
    param(
        [array]$Users,
        [int]$TopUsers = 200
    )

    Write-Log -Message "Generation du rapport CSV..." -LogLevel "INFO"

    # Filtrer les utilisateurs depassant le seuil de 8192 bytes
    $reportTop = $Users | Where-Object { $_.TokenSize -ge $Threshold } | Sort-Object TokenSize -Descending | Select-Object -First $TopUsers

    # Fichier de sortie unique
    $date = Get-Date -Format "yyyyMMdd_HHmmss"
    $fileTop = "TokenSizeTopReport_$date.csv"

    # Export CSV
    $reportTop | Export-Csv -Path $fileTop -NoTypeInformation -Delimiter ";"

    Write-Log -Message "Rapport genere : $fileTop" -LogLevel "INFO"
}

# Execution principale du script
try {
    Check-Environment

    $users = Get-ADUsers -AccountName $AccountName -TrustedDomain $TrustedDomain
    $usersWithToken = @()

    foreach ($user in $users) {
        $tokenData = Calculate-TokenSize -User $user
        $usersWithToken += [PSCustomObject]@{
            SamAccountName = $user.SamAccountName
            Domain         = $user.Domain
            TokenSize      = $tokenData.TokenSize
            MemberOfCount  = $tokenData.MemberOfCount
        }
    }

    Generate-TokenReport -Users $usersWithToken
    Write-Log -Message "Script termine avec succes." -LogLevel "INFO"
}
catch {
    Write-Log -Message "Erreur : $_" -LogLevel "ERROR"
}
