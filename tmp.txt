
function Execute-ScriptWithCSVParameters {
    <#
    .SYNOPSIS
    Executes a main script with parameters from a CSV file.

    .DESCRIPTION
    This function executes a main script with parameters specified in a CSV file. It verifies if the number of parameters in the CSV matches the expected number of parameters for the main script and can issue warnings or errors accordingly.

    .PARAMETER CSVFilePath
    Specifies the path of the CSV file containing the parameters.

    .PARAMETER MainScriptPath
    Specifies the path of the main script to execute.

    .PARAMETER IgnoreWarnings
    Indicates whether warnings about parameter mismatches should be ignored.

    .PARAMETER ThrowErrorOnMismatch
    Indicates whether an error should be thrown if the number of parameters in the CSV does not match the expected number of parameters for the main script.

    .EXAMPLE
    Execute-ScriptWithCSVParameters -CSVFilePath "C:\path\to\file.csv" -MainScriptPath "C:\path\to\main_script.ps1" -IgnoreWarnings -ThrowErrorOnMismatch -Verbose
    Executes the main script "main_script.ps1" with parameters specified in the CSV file "file.csv". Warnings are ignored, and an error is thrown in case of incorrect parameter count.

    Example main_script.ps1 :
    Param ( 
    $Name, 
    $DisplayName 
    ) 

    Get-Process -Name $Name
    Get-Service -DisplayName $DisplayName

    Example file.csv :
    Name,DisplayName
    AggregatorHost,Windows Update
    Explorer,WebClient

    #>

    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$CSVFilePath,

        [Parameter(Mandatory = $true)]
        [string]$MainScriptPath,

        [switch]$IgnoreWarnings,
        [switch]$ThrowErrorOnMismatch
    )

    # Log the start of the function
    Write-Verbose "Starting the Execute-ScriptWithCSVParameters function with parameters :"
    Write-Verbose "CSVFilePath: $CSVFilePath"
    Write-Verbose "MainScriptPath: $MainScriptPath"
    Write-Verbose "IgnoreWarnings: $IgnoreWarnings"
    Write-Verbose "ThrowErrorOnMismatch: $ThrowErrorOnMismatch"

    # Read the CSV file
    $parameters = Import-Csv -Path $CSVFilePath

    # Check if the number of parameters matches the number of values from CSV
    $expectedParamCount = (Get-Command $MainScriptPath).Parameters.Count

    foreach ($paramSet in $parameters) {
        # Create a dictionary to store the parameters for this set
        $parametersDictionary = @{}

        # Fill the dictionary with values from the CSV file for this set
        foreach ($property in $paramSet.PSObject.Properties) {
            $parametersDictionary[$property.Name] = $property.Value
        }

        $actualParamCount = $parametersDictionary.Count

        if ($actualParamCount -ne $expectedParamCount) {
            if (-not $IgnoreWarnings) {
                Write-Warning "The number of parameters in the CSV does not match the expected number of parameters for the main script."
            }

            if ($ThrowErrorOnMismatch) {
                throw "The number of parameters in the CSV does not match the expected number of parameters for the main script."
            }
        }

        # Log the execution of the main script with the parameters for this set
        Write-Verbose "Executing the main script '$MainScriptPath' with the following parameters for this set:"
        $parametersDictionary.GetEnumerator() | ForEach-Object {
            Write-Verbose "   $($_.Key): $($_.Value)"
        }

        # Execute the main script with the parameters for this set
        . $MainScriptPath @parametersDictionary
    }
}

# Example usage:
 Execute-ScriptWithCSVParameters -CSVFilePath "C:\Users\dan_g\Downloads\tmp2\a.csv" -MainScriptPath "C:\Users\dan_g\Downloads\mon_script_principal.ps1" -IgnoreWarnings -ThrowErrorOnMismatch -Verbose
