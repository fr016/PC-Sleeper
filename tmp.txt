D'accord, je vais te proposer un ensemble de fonctions PowerShell avec plusieurs approches pour tester l'exportabilité d'une clé privée. Chaque fonction offrira une méthode différente afin de créer un workflow flexible. Cela inclura des méthodes basées sur l'exportation, la vérification de propriétés système, et d'autres stratégies pour te donner des options selon le contexte.

Voici ce workflow avec plusieurs fonctions :

### 1. **Vérification de base via `HasPrivateKey`**

C'est la première étape pour savoir si un certificat a une clé privée, car si ce n'est pas le cas, l'exportabilité est hors de question.

```powershell
function Test-HasPrivateKey {
    param(
        [string]$Thumbprint
    )

    # Récupérer le certificat à partir de son empreinte
    $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Thumbprint }

    if ($cert -eq $null) {
        Write-Host "Certificat non trouvé."
        return $false
    }

    # Vérifier s'il possède une clé privée
    return $cert.HasPrivateKey
}
```

### 2. **Tentative d'exportation (sans mot de passe) pour tester l'exportabilité**

Cette fonction tente d'exporter le certificat avec la clé privée pour voir si elle est exportable, sans avoir besoin d'un mot de passe.

```powershell
function Test-KeyExportabilityByExport {
    param(
        [string]$Thumbprint
    )

    $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Thumbprint }

    if ($cert -eq $null) {
        Write-Host "Certificat non trouvé."
        return $false
    }

    if (-not $cert.HasPrivateKey) {
        Write-Host "Le certificat n'a pas de clé privée."
        return $false
    }

    try {
        # Tentative d'exportation de la clé privée sans mot de passe
        $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)
        return $true
    }
    catch {
        return $false
    }
}
```

### 3. **Vérification des propriétés détaillées avec `CNG` ou `CSP` (Providers de clé)**

On peut également vérifier si la clé privée est gérée par `CNG` (Cryptography Next Generation) ou un fournisseur `CSP`. Les clés CNG ont des propriétés différentes, et cela peut affecter l'exportabilité.

```powershell
function Test-KeyProviderDetails {
    param(
        [string]$Thumbprint
    )

    $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Thumbprint }

    if ($cert -eq $null) {
        Write-Host "Certificat non trouvé."
        return $null
    }

    if (-not $cert.HasPrivateKey) {
        Write-Host "Le certificat n'a pas de clé privée."
        return $null
    }

    # Vérifier si c'est une clé CNG ou CSP
    if ($cert.PrivateKey -is [System.Security.Cryptography.CngKey]) {
        Write-Host "La clé est gérée par CNG (Cryptography Next Generation)."
        return $cert.PrivateKey.KeyExportPolicy
    }
    elseif ($cert.PrivateKey -is [System.Security.Cryptography.RSACryptoServiceProvider]) {
        Write-Host "La clé est gérée par un fournisseur CSP."
        return $cert.PrivateKey.CspKeyContainerInfo.Exportable
    }
    else {
        Write-Host "Type de fournisseur inconnu."
        return $null
    }
}
```

### 4. **Test de l'exportabilité en utilisant `certutil`**

Le programme `certutil` est un outil intégré à Windows pour la gestion des certificats. On peut l'utiliser dans PowerShell pour tester l'exportabilité.

```powershell
function Test-KeyExportabilityByCertUtil {
    param(
        [string]$Thumbprint
    )

    $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Thumbprint }

    if ($cert -eq $null) {
        Write-Host "Certificat non trouvé."
        return $false
    }

    if (-not $cert.HasPrivateKey) {
        Write-Host "Le certificat n'a pas de clé privée."
        return $false
    }

    try {
        # Utiliser certutil pour vérifier si la clé privée est exportable
        $certutilOutput = certutil -user -exportPFX $cert.Thumbprint test.pfx
        if ($certutilOutput -like "*Succeeded*") {
            Remove-Item test.pfx  # Supprimer le fichier temporaire
            return $true
        } else {
            return $false
        }
    }
    catch {
        return $false
    }
}
```

### 5. **Vérification des permissions du conteneur de clés (si accessible)**

Dans certains cas, les permissions sur les clés privées (stockées dans des conteneurs de clés) peuvent indiquer si elles sont exportables ou non.

```powershell
function Test-KeyContainerPermissions {
    param(
        [string]$Thumbprint
    )

    $cert = Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $Thumbprint }

    if ($cert -eq $null) {
        Write-Host "Certificat non trouvé."
        return $false
    }

    if (-not $cert.HasPrivateKey) {
        Write-Host "Le certificat n'a pas de clé privée."
        return $false
    }

    try {
        $keyContainer = $cert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName
        $keyPath = "HKLM:\Software\Microsoft\Cryptography\Keys\$keyContainer"
        $permissions = Get-Acl $keyPath

        # Analyse des permissions sur le conteneur de clés pour voir si l'export est possible
        if ($permissions.AccessToString -match "Everyone.*FullControl") {
            return $true
        } else {
            return $false
        }
    }
    catch {
        return $false
    }
}
```

### 6. **Combinaison des méthodes pour un workflow complet**

On peut créer une fonction principale qui orchestre l'appel de différentes fonctions selon les besoins ou l'état du certificat.

```powershell
function Test-KeyExportabilityWorkflow {
    param(
        [string]$Thumbprint
    )

    # Vérification initiale de la clé privée
    if (-not (Test-HasPrivateKey -Thumbprint $Thumbprint)) {
        Write-Host "Pas de clé privée associée à ce certificat."
        return $false
    }

    # Tentative d'exportation directe
    if (Test-KeyExportabilityByExport -Thumbprint $Thumbprint) {
        Write-Host "La clé privée est exportable (par exportation directe)."
        return $true
    }

    # Vérification via certutil
    if (Test-KeyExportabilityByCertUtil -Thumbprint $Thumbprint) {
        Write-Host "La clé privée est exportable (via certutil)."
        return $true
    }

    # Analyse des permissions du conteneur de clés
    if (Test-KeyContainerPermissions -Thumbprint $Thumbprint) {
        Write-Host "Les permissions permettent l'exportation."
        return $true
    }

    # Si toutes les méthodes échouent
    Write-Host "La clé privée n'est probablement pas exportable."
    return $false
}
```

### Comment utiliser ce workflow :

Appelle simplement la fonction `Test-KeyExportabilityWorkflow` avec l'empreinte du certificat :

```powershell
$thumbprint = "ABCD1234..."  # Remplace avec l'empreinte du certificat
$result = Test-KeyExportabilityWorkflow -Thumbprint $thumbprint
Write-Host "Exportabilité de la clé privée : $result"
```

### Ce workflow inclut :
1. **Vérification de base avec `HasPrivateKey`** pour s'assurer que le certificat a une clé privée.
2. **Exportation directe** pour tester l'exportabilité.
3. **Utilisation de `certutil`** pour tester si la clé est exportable via l'outil Windows.
4. **Vérification des permissions sur le conteneur de clés** si applicable.

Cela te donne un ensemble d'options très versatile pour tester l'exportabilité de la clé privée des certificats en fonction des scénarios que tu rencontres.
