function Get-CertificateStoreName {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Thumbprint,
        
        [Parameter(Mandatory = $true)]
        [string]$RemoteServer = $env:COMPUTERNAME
    )

    # Check if the remote server is the local server
    if ($RemoteServer -eq $env:COMPUTERNAME) {
        # Execute the script block locally
        $result = {
            param($Thumbprint)

            # Get all certificate stores
            $stores = Get-ChildItem -Path "Cert:\*" -Recurse | Where-Object { $_.PSIsContainer }

            # Iterate over each store and search for the certificate
            foreach ($store in $stores) {
                $certs = Get-ChildItem -Path $store.PSPath
                foreach ($cert in $certs) {
                    if ($cert.Thumbprint -eq $Thumbprint) {
                        return $store.Name
                    }
                }
            }

            return "Certificate not found in any store."
        } -ArgumentList $Thumbprint

        return Invoke-Command -ScriptBlock $result
    }
    else {
        # Invoke the script block on the remote server using Invoke-Command
        $result = Invoke-Command -ComputerName $RemoteServer -ScriptBlock {
            param($Thumbprint)

            # Get all certificate stores
            $stores = Get-ChildItem -Path "Cert:\*" -Recurse | Where-Object { $_.PSIsContainer }

            # Iterate over each store and search for the certificate
            foreach ($store in $stores) {
                $certs = Get-ChildItem -Path $store.PSPath
                foreach ($cert in $certs) {
                    if ($cert.Thumbprint -eq $Thumbprint) {
                        return $store.Name
                    }
                }
            }

            return "Certificate not found in any store."
        } -ArgumentList $Thumbprint

        return $result
    }
}


function Get-CertificateAttributes {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Thumbprint,
        
        [Parameter(Mandatory = $true)]
        [string]$RemoteServer = $env:COMPUTERNAME
    )

    # Check if the remote server is the local server
    if ($RemoteServer -eq $env:COMPUTERNAME) {
        # Execute the script block locally
        $result = {
            param($Thumbprint)

            # Get the certificate
            $certificate = Get-ChildItem -Path "Cert:\*" -Recurse | Where-Object { $_.Thumbprint -eq $Thumbprint }

            if ($certificate) {
                # Calculate remaining days
                $remainingDays = ($certificate.NotAfter - (Get-Date)).Days

                # Check if autoenroll is enabled
                $autoenroll = $false
                if ($certificate.Extensions) {
                    $autoenrollExtension = $certificate.Extensions | Where-Object { $_.Oid.Value -eq "1.3.6.1.4.1.311.20.2" }
                    if ($autoenrollExtension) {
                        $autoenroll = $true
                    }
                }

                # Return the attributes
                return @{
                    Thumbprint     = $certificate.Thumbprint
                    Subject        = $certificate.Subject
                    Issuer         = $certificate.Issuer
                    NotBefore      = $certificate.NotBefore
                    NotAfter       = $certificate.NotAfter
                    RemainingDays  = $remainingDays
                    AutoEnroll     = $autoenroll
                }
            }
            else {
                return "Certificate not found."
            }
        } -ArgumentList $Thumbprint

        return Invoke-Command -ScriptBlock $result
    }
    else {
        # Invoke the script block on the remote server using Invoke-Command
        $result = Invoke-Command -ComputerName $RemoteServer -ScriptBlock {
            param($Thumbprint)

            # Get the certificate
            $certificate = Get-ChildItem -Path "Cert:\*" -Recurse | Where-Object { $_.Thumbprint -eq $Thumbprint }

            if ($certificate) {
                # Calculate remaining days
                $remainingDays = ($certificate.NotAfter - (Get-Date)).Days

                # Check if autoenroll is enabled
                $autoenroll = $false
                if ($certificate.Extensions) {
                    $autoenrollExtension = $certificate.Extensions | Where-Object { $_.Oid.Value -eq "1.3.6.1.4.1.311.20.2" }
                    if ($autoenrollExtension) {
                        $autoenroll = $true
                    }
                }

                # Return the attributes
                return @{
                    Thumbprint     = $certificate.Thumbprint
                    Subject        = $certificate.Subject
                    Issuer         = $certificate.Issuer
                    NotBefore      = $certificate.NotBefore
                    NotAfter       = $certificate.NotAfter
                    RemainingDays  = $remainingDays
                    AutoEnroll     = $autoenroll
                }
            }
            else {
                return "Certificate not found."
            }
        } -ArgumentList $Thumbprint

        return $result
    }
}

